<?xml version="1.0" encoding="UTF-8" ?>
<!-- 
	根节点：<configuration>
	属性:
		scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。
		scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
		debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
	
	子节点：appender
		 logger
		 root
 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<jmxConfigurator />
	<Encoding>UTF-8</Encoding>
	
	<!-- 通过<property>定义的值会被插入到logger上下文中,定义变量后，可以使"${}"来使用变量
	<property name="APP_Name" value="myAppName" />    -->
	
	<!-- 每个logger都关联到logger上下文，默认上下文名称为"default"。可以使用<contextName>设置成其他名字 
    <contextName>${APP_Name}</contextName>  -->
    
    <!-- 日志文件的存储路径  勿在 LogBack 的配置中使用相对路径 -->
	<property name="LOG_HOME" value="D:/MYRON_LOG" /> 
	
	<property name="ENCODER_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n" />

	
	<!-- ========================控制台输出日志========================================================= -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<!-- 日志格式化 -->
		<encoder>
			<pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
		</encoder>
		<!-- <layout class="ch.qos.logback.classic.PatternLayout">
			<Pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} -%msg%n</Pattern>
		</layout> -->
	</appender>

	<!-- ========================文件输出日志 (文件大小策略进行文件输出，超过指定大小对文件备份)======================== -->
	<appender name="rollingFile" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 被写入的文件名，可以是相对目录，也可以是绝对目录，如果上级目录不存在会自动创建，没有默认值。 -->
		<file>${LOG_HOME}/rollingFile.log</file>
		
		<!-- 如果是 true，日志被追加到文件结尾，如果是 false，清空现存文件，默认是true。 -->
		<append>true</append>  
		
		<!-- encoder：负责两件事，一是把日志信息转换成字节数组，二是把字节数组写入到输出流 -->
		<encoder>
			<!-- 日志格式化 -->
			<pattern>${ENCODER_PATTERN}</pattern>
		</encoder>
		
		<!-- <rollingPolicy>:滚动策略：当发生滚动时，决定 RollingFileAppender 的行为，涉及文件移动和重命名
			1.TimeBasedRollingPolicy:根据时间来制定滚动策略，既负责滚动也负责出发滚动 
			2.FixedWindowRollingPolicy： 根据固定窗口算法重命名文件的滚动策略
		 -->
		
		<!-- FixedWindowRollingPolicy： 根据固定窗口算法重命名文件的滚动策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.FixedWindowRollingPolicy">
			<!-- fileNamePattern:必须包含"%i",代表归档文件的序号 -->
			<fileNamePattern>rollingFile.%i.log</fileNamePattern>
			<!-- 可指定文件压缩选项 
			<fileNamePattern>xxxlog.%i.log.zip</fileNamePattern> -->
			
			<!-- 窗口索引最小值 -->
			<MinIndex>1</MinIndex>
			<!-- 窗口索引最大值，当用户指定的窗口过大时，会自动将窗口设置为12 -->
			<MaxIndex>12</MaxIndex>
		</rollingPolicy>
		
		<!-- 触发策略：告知 RollingFileAppender 何时激活滚动。-->
		<triggeringPolicy class="ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy">
			<!--这是活动文件的大小，默认值是10MB。 -->
			<MaxFileSize>10MB</MaxFileSize>
		</triggeringPolicy>
		 
	</appender>
	
	<!--========================每天生成一个日志文件，只保存7天的日志文件。=======================-->
	<appender name="dailyFile" class="ch.qos.logback.core.rolling.RollingFileAppender">   
		<file>${LOG_HOME}/ztesoft_daily.log</file>	
		<!-- 日志格式化 -->
		<encoder>
			<pattern>${ENCODER_PATTERN}</pattern>
		</encoder>
		
		<!-- TimeBasedRollingPolicy:根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">   
			<!--必选:-文件名及"%d"转换符 ,使用Java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd-->
			<fileNamePattern>ztesoft_daily.%d{yyyy-MM-dd}.log</fileNamePattern>  
			<!--<fileNamePattern>${LOG_HOME}/ztesoft_daily.%d{yyyy-MM-dd}.log.zip</fileNamePattern>-->

			<!--可选  控制保留的归档文件的最大数量，超出数量就删除旧文件,7代表7个月还是7天或7小时,根据上面的时间格式决定-->
			<maxHistory>7</maxHistory>    
		</rollingPolicy>   
	</appender>  
	
	<!--==========================每小时生成一个日志文件，只保存10小时日志文件。===============-->
	<appender name="hourFile" class="ch.qos.logback.core.rolling.RollingFileAppender">   
		<file>${LOG_HOME}/ztesoft_hour.log</file>	
		<!-- 日志格式化 -->
		<encoder>
			<pattern>${ENCODER_PATTERN}</pattern>
		</encoder>
		
		<!-- TimeBasedRollingPolicy:根据时间来制定滚动策略，既负责滚动也负责出发滚动 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">   
			<!--必选:-文件名及"%d"转换符 ,使用Java.text.SimpleDateFormat指定的时间格式，如：%d{yyyy-MM}。如果直接使用 %d，默认格式是 yyyy-MM-dd-->
			<fileNamePattern>ztesoft_hour.%d{yyyy-MM-dd HH}-%i.log</fileNamePattern>  
			
			<!--归档日志压缩zip--> 
			<!--<fileNamePattern>${LOG_HOME}/ztesoft_daily.%d{yyyy-MM-dd}.log.zip</fileNamePattern>-->

			<!-- 按时间滚动的同时，按文件大小来滚动 --> 
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>1MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
	
			<maxHistory>10</maxHistory>    
		</rollingPolicy>   
	</appender>  
	

	
	<!-- ======================logger start===================================== -->
	<!-- <logger>:设置某一个包或者具体的某一个类的日志打印级别,及指定定<appender>
		属性： name(必选): 用来指定受此loger约束的某一个包或者具体的某一个类
			level(可选):用来设置打印级别，大小写无关:TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF
				                   如果未设置此属性，那么当前loger将会继承上级的级别。
				                   
			addtivity(可选):是否向上级loger传递打印信息。默认是true。
	-->
	<logger name="xx.xxx.Xxx" level="DEBUG" additivity="true">
		<!-- <loger>可以包含零个或多个<appender-ref>元素，标识这个appender将会添加到这个loger。 -->
		<appender-ref ref="console" />  
		<appender-ref ref="businessLogFile" />
		<appender-ref ref="dailyFile" />
	</logger>
	
	
	<!-- ======================logger end===================================== -->
	
	<!-- <root>: 根loger,只有一个level属性，应为已经被命名为"root",默认DEBUG-->
	<root level="DEBUG">
		<appender-ref ref="console" />
	</root>

</configuration>